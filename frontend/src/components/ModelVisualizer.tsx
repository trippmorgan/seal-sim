// src/components/ModelVisualizer.tsx

import React, { useState } from 'react';

/**
 * @file ModelVisualizer.tsx
 * @description This component serves as the primary user interface for interacting with the generative model.
 * It manages its own internal state for the prompt input and loading status, but delegates the actual
 * API call and the management of the resulting completion to its parent via a callback function (`onGenerate`).
 * This pattern is known as "lifting state up" and is central to React's unidirectional data flow.
 * The component is "smart" about its own concerns (form input, loading state) but "dumb" about global
 * application state.
 */

interface ModelVisualizerProps {
  // A callback function to be invoked when the user requests a generation.
  // It passes the prompt up to the parent component.
  onGenerate: (prompt: string) => Promise<void>;

  // The completion text generated by the model, passed down from the parent.
  completion: string | null;

  // A boolean indicating if a generation request is currently in flight.
  isLoading: boolean;
}

const ModelVisualizer: React.FC<ModelVisualizerProps> = ({ onGenerate, completion, isLoading }) => {
  // `useState` is used here to manage the state that is local and exclusive to this component: the text in the input field.
  // This state does not need to be known by any other component, so it is kept here.
  const [prompt, setPrompt] = useState<string>('Write a python function to sort a list of numbers.');

  // This handler orchestrates the generation process. It prevents default form submission,
  // checks for empty input, and then calls the `onGenerate` prop to trigger the process in the parent component.
  const handleGenerateClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault(); // Prevents page reload on form submission.
    if (!prompt.trim() || isLoading) return;
    onGenerate(prompt);
  };

  return (
    <div className="p-4 border border-gray-700 rounded-lg bg-gray-900 shadow-md">
      <h2 className="text-xl font-bold text-green-300 mb-4">1. Generate with Model</h2>
      <form>
        <div className="mb-4">
          <label htmlFor="prompt" className="block text-sm font-medium text-gray-300 mb-1">
            Prompt
          </label>
          <textarea
            id="prompt"
            rows={3}
            className="w-full p-2 bg-gray-800 border border-gray-600 rounded-md focus:ring-green-500 focus:border-green-500 text-white"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Enter your prompt here..."
          />
        </div>
        <button
          onClick={handleGenerateClick}
          disabled={isLoading || !prompt.trim()}
          className="w-full px-4 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 disabled:bg-gray-500 disabled:cursor-not-allowed"
        >
          {isLoading ? 'Generating...' : 'Generate'}
        </button>
      </form>

      {/* The completion is only displayed once it exists in the parent's state. */}
      {completion && (
        <div className="mt-4">
          <h3 className="text-lg font-semibold text-green-400">Model Completion:</h3>
          <div className="p-3 mt-2 bg-gray-800 rounded-md whitespace-pre-wrap font-mono text-sm text-cyan-300">
            {completion}
          </div>
        </div>
      )}
    </div>
  );
};

export default ModelVisualizer;